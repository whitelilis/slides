关于它的简单介绍如下：

1949年，EDVAC（Electronic Discrete Variable Automatic Computer，爱达瓦克）被推出并获得了极大的成功。这是对冯・诺依曼架构的第一个实践实例，实际上也是图灵机的第一个现实实现。那一年好运与阿隆左・丘奇无缘。

直到1950年代将尽，一位 MIT 的教授John McCarthy（也是普林斯顿毕业生）对阿隆左・丘奇的工作产生了兴趣。1958年，他公开了表处理语言 Lisp。Lisp 是对阿隆左・丘奇的 lambda 演算的实现但同时它工作在冯・诺依曼计算机上！很多计算机科学家认识到了 Lisp 的表达能力。1973年，MIT人工智能实验室的一组程序员开发了被称为Lisp机器的硬件－阿隆左 lambda 演算的硬件实现！

函数式编程是对阿隆左・丘奇理论的实践应用。但也并非全部 lambda 演算都被应用到了实践中，因为 lambda 演算不是被设计为在物理局限下工作的。因此，象面向对象的编程一样，函数式编程是一系列理念，而不是严格的教条。

lambda 演算被设计用来探询关于计算的问题，所以函数式编程主要处理计算，并惊人地用函数来完成这一过程。函数是函数式编程的基本单位，函数几乎被用于一切，包括最简单的计算，甚至变量都由计算取代。

函数式程序无需任何修改即可并行执行。不用担心死锁和临界区，因为你从未用锁！函数式程序里没有任何数据被同一线程修改两次，更不用说两个不同的线程了。这意味着可以不假思索地简单增加线程而不会引发折磨着并行应用程序的传统问题。

事实既然如此，为什么并不是所有人都在需要高度并行作业的应用中采用函数式程序？嗯，他们正在这样做。爱立信公司设计了一种叫作 Erlang 的函数式语言并将它使用在需要极高抗错性和可扩展性的电信交换机上。还有很多人也发现了 Erlang 的优势并开始使用它。我们谈论的是电信通信控制系统，这与设计华尔街的典型系统相比对可靠性和可升级性要求高了得多。实际上，Erlang 系统并不可靠和易扩展，Java 才是。Erlang 系统只是坚如磐石。

函数式语言的一个有趣的属性就是他们可以用数学方式推理。因为一种函数式语言只是一个形式系统的实现，所有在纸上完成的运算都可以应用于用这种语言书写的程序。编译器可以用数学理论将转换一段代码转换为等价的但却更高效的代码[7]。多年来关系数据库一直在进行着这类优化。没有理由不能把这一技术应用到常规软件上。

另外，还能使用这些技术来证明部分程序的正确，甚至可能创建工具来分析代码并为单元测试自动生成边界用例！对稳固的系统这种功能没有价值，但如果你要设计心房脉冲产生器 (pace maker)或空中交通控制系统，这种工具就不可或缺。如果你编写的应用程序不是产业的核心任务，这类工具也是你强于竞争对手的杀手锏。

我认识的大多数人都读过“四人帮”的那本设计模式，任何自重的程序员都会告诉你那本书是语言中立的(agnostic)，模式在软件工程中是通用的，和使用的语言无关。这个说法颇为高贵，故而不幸的是，有违现实。

函数式编程极具表达能力。在函数式语言中，语言既已达此高度，设计模式就不再是必需，最终你将设计模式彻底消除而以概念编程。

缺点
当然从来不存在免费的午餐。惰性求值有很多的缺点，主要就在于，懒。有很多现实世界的问题需要严格求值。

\section{关于软件工程}

E.W.Dijkstra~有句名言：“迄今为止，所有的程序调试设施只能发现程序中的错误，并不
能表明程序没有错误” ── 再论“软件结构与工具”《小型微型计算系统》No.7 1982年

无论是计算机系统还是软件系统，结构问题都是影响系统质量的内在因素。
FP 的优点有：结构清晰，理论严谨，便于扩充。
缺点有：
\begin{itemize}
	\item 以处理复合数据为基础，和~von Neumann~式结构不匹配，在其上运行效率不高
	\item 从易读性考虑，小的还行，大的则浑然一片，层次不清，难于阅读
	\item 不利于调试。程序的正确性，一方面建立在函数正确性上，另一方面在于正确使用
		上，中间结果不保留，出错难以检查
\end{itemize}
\pozhehao 《计算机科学》十周年纪念征文。No.1 1989 合作者：徐家福

在软件工程中，方法和工具是同一问题的两个不同方面，方法是工具研制的先导，工具是
方法的实在体现。
\pozhehao 《中国科学院院士谈~21~世纪科学技术》，上海三联书店，1995年

所谓“主流方向”不是指“最新”或“当前用得最多”，而是从发展趋势上看，最有把握被广泛
接受的方法与技术
\pozhehao 《面向对象的~CASE~环境青鸟~II~型系统的设计与实现》《中国科学》（A~辑）N0.5
1995年

……国内开发软件之所以重复多，一切都要从头做起的原因，在于工具太少，工具太差，工
具太落后。
\pozhehao 《发展软件工程，建立软件产业的几点建议》《中国电子学会电子计算机分会第六届
年会综合报告汇编》1982年11月，于郑州

\section{Haskell~的威力}
\lstinputlisting[frame=tb]{src/RoughSet.hs}

